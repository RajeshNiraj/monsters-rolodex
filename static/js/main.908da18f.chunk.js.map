{"version":3,"sources":["components/card/card-component.jsx","components/card-list/card-list-component.jsx","components/search-box/search-box-component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAGaA,EAAO,SAAAC,GAChB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UACTC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,uBACH,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCJjBC,G,MAAW,SAAAR,GACpB,OACI,qBAAKC,UAAU,YAAf,SACED,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAEtB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCPpBM,G,MAAY,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,YAAcC,EAAkB,EAAlBA,aACrC,OACI,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EACjDG,SAAUF,MCkCPG,E,kDAlCb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXR,SAAW,GACXS,YAAY,IAJH,E,qDAQb,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAEf,SAAUc,S,oBAG3C,WAAU,IAAD,OACP,EAAkCE,KAAKR,MAA/BR,EAAR,EAAQA,SAAUS,EAAlB,EAAkBA,YACZQ,EAAmBjB,EAASkB,QAAO,SAAAvB,GAAO,OAC7CA,EAAQE,KAAKsB,cAAcC,SAASX,EAAYU,kBAGnD,OACE,sBAAK3B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWW,YAAY,gBACrBC,aAAc,SAACiB,GAAD,OACZ,EAAKN,SAAS,CAAEN,YAAcY,EAAEC,OAAOC,WAE3C,cAAC,EAAD,CAAUvB,SAAUiB,W,GA5BVO,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.908da18f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.styles.css\"\r\n\r\nexport const Card = props => {\r\n    return(\r\n        <div className=\"card-container\">\r\n            <img alt=\"monster\" \r\n            src={`https://robohash.org/${props.monster.id}?set=set2&180x180`}/>\r\n            <h2>{props.monster.name}</h2>\r\n            <p>{props.monster.email}</p>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { Card } from \"../card/card-component\";\r\nimport \"./card-list.styles.css\";\r\n\r\n\r\nexport const CardList = props => {\r\n    return(\r\n        <div className=\"card-list\">\r\n         {props.monsters.map(monster => \r\n            ( \r\n              <Card key={monster.id} monster={monster}/>\r\n            \r\n            ))}  \r\n        \r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport \"./search-box.styles.css\"\r\n\r\nexport const SearchBox = ({placeholder , handleChange}) => {\r\n    return (        \r\n        <input className=\"search\" type=\"search\" placeholder={placeholder}\r\n            onChange={handleChange}\r\n        />       \r\n    )\r\n}","import React,{ Component } from \"react\";\nimport './App.css';\nimport { CardList } from \"./components/card-list/card-list-component\";\nimport {SearchBox} from \"./components/search-box/search-box-component\"\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      monsters : [] , \n      searchField:'' \n    }\n  }\n\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(users => this.setState({ monsters: users}));\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => \n       monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n    \n    return (\n      <div className=\"App\">        \n        <h1>Monsters Rolodex</h1>\n        <SearchBox placeholder=\"search robots\" \n          handleChange={(e) => \n            this.setState({ searchField : e.target.value })} />\n        \n        <CardList monsters={filteredMonsters}/>  \n      </div>\n    );  \n  }\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}